getwd()
training <- read.csv("E:\ITSEC\export-2015.05\export-2015.05.01.csv")
training <- read.csv(file = "E:\ITSEC\export-2015.05\export-2015.05.01.csv")
training <- read.csv(file = "E:/ITSEC/export-2015.05/export-2015.05.01.csv")
sapply(training, class)
str(training)
summary(training)
head(training)
describe(training)
library(ISLR); library(ggplot2); library(caret); library(Hmisc); library(randomForest)
describe(training)
summary(training)
str(training)
temp = list.files(path = "E:/ITSEC/export-2015.05/", pattern="*.csv")
temp = list.files(path = "E:/ITSEC/export-2015.05", pattern="*.csv")
temp
myfiles = lapply(temp, read.csv)
for(i in 1:length(temp))
temp[i] <- c("E:/ITSEC/export-2015.05", "/", i)
warnings()
head(temp)
temp = list.files(path = "E:/ITSEC/export-2015.05", pattern="*.csv")
for(i in 1:length(temp))
df <- c("E:/ITSEC/export-2015.05", "/", i)
head(df)
for(i in 1:length(temp))
df <- paste("E:/ITSEC/export-2015.05", "/", i)
for(i in 1:length(temp))
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i])
head(df)
for(i in 1:length(temp))
df <- c("E:/ITSEC/export-2015.05", "/", temp[i])
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], collapse="")
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], collapse=" ")
for(i in 1:length(temp))
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
training <- data.frame()
for(i in 1:length(temp))
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
training <- rbind(training, read.csv(file = df)
for(i in 1:length(temp))
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
training <- rbind(training, read.csv(file = df))
for(i in 1:length(temp)) {
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
training <- rbind(training, read.csv(file = df))
}
temp = list.files(path = "E:/ITSEC/export-2015.05", pattern="*.csv")
training <- data.frame()
training <- data.frame()
temp = list.files(path = "E:/ITSEC/export-2015.05", pattern="*.csv")
#myfiles = lapply(temp, read.csv)
training <- data.frame()
for(i in 1:length(temp)) {
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
training <- rbind(training, read.csv(file = df))
}
export.2015.05.01 <- read.csv("E:/ITSEC/export-2015.05/export-2015.05.01.csv")
View(export.2015.05.01)
for(i in 1:length(temp)) {
print(i)
df <- paste("E:/ITSEC/export-2015.05", "/", temp[i], sep="")
print(df)
training <- rbind(training, read.csv(df))
print(c("done with ", i))
}
install.packages("rattle ")
install.packages("rattle")
write.table(training, "E:/ITSEC/export-2015.05/allexport-2015.05")
library(rattle)
library(rattle)
rattle()
head(training)
warnings()
test <- training[20,]
test
test <- training[c(1:20),]
test <- test[,-1]
test
test <- training[c(1:20),]
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv")
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE)
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE,  sep = ",")
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE,  sep = ",", quote=FALSE)
test <- training[c(1:20000),]
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE,  sep = ",", quote=FALSE)
test <- training[c(1:20000),]
test <- training[c(1:2000),]
write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE,  sep = ",", quote=FALSE)
training.sub <- sample(training, 20000)
training.sub <- sample(training, 0.01)
training.sub <- sample(training, 1)
training.sub <- training[c(1:5000),]
trainfilt <- training.sub[,-c(1,4,7)]
head(trainfilt)
inTrain <- createDataPartition(trainfilt$subnet_type, p = 0.75, list = FALSE)
trainfilt.train <- trainfilt[inTrain,]
trainfilt.test <- trainfilt[-inTrain,]
library(ISLR); library(ggplot2); library(caret); library(Hmisc); library(randomForest);
inTrain <- createDataPartition(trainfilt$subnet_type, p = 0.75, list = FALSE)
trainfilt.train <- trainfilt[inTrain,]
trainfilt.test <- trainfilt[-inTrain,]
model <- train(subnet_type ~ ., data=trainfilt.train, method="rpart")
predictions <- predict(model, newdata=trainfilt.test)
confusionMatrix(predictions, trainfilt.test$subnet_type)
importance <- varImp(model_cvRF , scale=FALSE)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(model$finalModel)
rattle::fancyRpartPlot(model$finalModel)
fancyRpartPlot(model)
print(model$finalModel)
fancyRpartPlot((model$finalModel)
model <- train(subnet_type~ ., data=trainfilt.train, method="rpart")
model <- train(subnet_type~ ., data=trainfilt.train, method="rpart")
predictions <- predict(model, newdata=trainfilt.test)
confusionMatrix(predictions, trainfilt.test$subnet_type)
fancyRpartPlot((model$finalModel)
rattle()
fancyRpartPlot((model$finalModel)
plot(model$finalModel, uniform=TRUE)
plot(model$finalModel, uniform=TRUE)
fancyRpartPlot(model$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(model$finalModel)
#write.table(test, "E:/ITSEC/export-2015.05/testexport-2015.05.csv", row.names=FALSE,  sep = ",", quote=FALSE)
write.table(training, "E:/ITSEC/export-2015.05/allexport-2015.05.csv", row.names=FALSE,  sep = ";", quote=FALSE)
#Data description
#summary(training)
#describe(training)
#head(training)
#sapply(training, class)
#str(training)
#Clean data
#training.sub <- training[c(1:5000),]
#Remove first uneccessary columns of username and timestamps
trainfilt <- training[,-c(1,4,7)]
# make all into type numeric
#for(i in c(2:ncol(trainfilt)-1)){
#        trainfilt[,i] = as.numeric(as.character(trainfilt[,i]))
#}
# remove columns with almost all NA values
#trainfilt <- trainfilt[colnames(trainfilt[colSums(is.na(trainfilt))==0])]
# Tested remove Near zero variance predictors
#nzv <- nearZeroVar(trainfilt)
#trainfilt <- trainfilt[, -nzv]
# Split training data into train and test to do cross-validation
inTrain <- createDataPartition(trainfilt$subnet_type, p = 0.75, list = FALSE)
trainfilt.train <- trainfilt[inTrain,]
trainfilt.test <- trainfilt[-inTrain,]
#Cross-validation
# define training control
#train_control <- trainControl(method="cv", number=3)
# train the model
#model_cvRF <- train(classe~., data=trainfilt.train, trControl=train_control, method="rpart")
model <- train(subnet_type~ ., data=trainfilt.train, method="rpart")
# make predictions
predictions <- predict(model, newdata=trainfilt.test)
# summarize results
confusionMatrix(predictions, trainfilt.test$subnet_type)
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
#print(model$finalModel)
# plot importance
#plot(importance)
#plot(model$finalModel, uniform=TRUE)
fancyRpartPlot(model$finalModel)
library(pROC)
install.packages("pROC")
library(pROC)
set.wd("E:\Github\TitanicChallenge\code")
set.wd("E:/Github/TitanicChallenge/code")
setwd("E:\Github\TitanicChallenge\code")
setwd("E:/Github/TitanicChallenge/code")
getwd
getwd()
